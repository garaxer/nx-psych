/* tslint:disable */
/* eslint-disable */
/**
 * Nx Psych Api
 * The API for Nx Psych App
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BookingResponseDto
 */
export interface BookingResponseDto {
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof BookingResponseDto
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'category': string;
    /**
     * 
     * @type {number}
     * @memberof BookingResponseDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingResponseDto
     */
    'type': BookingResponseDtoTypeEnum;
}

export const BookingResponseDtoTypeEnum = {
    Remote: 'remote',
    Inperson: 'inperson'
} as const;

export type BookingResponseDtoTypeEnum = typeof BookingResponseDtoTypeEnum[keyof typeof BookingResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreateBookingDto
 */
export interface CreateBookingDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof CreateBookingDto
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'category': string;
    /**
     * 
     * @type {number}
     * @memberof CreateBookingDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingDto
     */
    'type': CreateBookingDtoTypeEnum;
}

export const CreateBookingDtoTypeEnum = {
    Remote: 'remote',
    Inperson: 'inperson'
} as const;

export type CreateBookingDtoTypeEnum = typeof CreateBookingDtoTypeEnum[keyof typeof CreateBookingDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreateServiceDto
 */
export interface CreateServiceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateServiceDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateServiceDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceDto
     */
    'longDescription': string;
}
/**
 * 
 * @export
 * @interface FooDto
 */
export interface FooDto {
    /**
     * 
     * @type {string}
     * @memberof FooDto
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ServiceResponseDto
 */
export interface ServiceResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ServiceResponseDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'longDescription': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponseDto
     */
    'type': ServiceResponseDtoTypeEnum;
}

export const ServiceResponseDtoTypeEnum = {
    Remote: 'remote',
    Inperson: 'inperson'
} as const;

export type ServiceResponseDtoTypeEnum = typeof ServiceResponseDtoTypeEnum[keyof typeof ServiceResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface UpdateBookingDto
 */
export interface UpdateBookingDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookingDto
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'category': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookingDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookingDto
     */
    'type': UpdateBookingDtoTypeEnum;
}

export const UpdateBookingDtoTypeEnum = {
    Remote: 'remote',
    Inperson: 'inperson'
} as const;

export type UpdateBookingDtoTypeEnum = typeof UpdateBookingDtoTypeEnum[keyof typeof UpdateBookingDtoTypeEnum];

/**
 * 
 * @export
 * @interface UpdateServiceDto
 */
export interface UpdateServiceDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceDto
     */
    'longDescription': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetDataTwo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizedControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {CreateBookingDto} createBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateReport: async (type: string, createBookingDto: CreateBookingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('bookingControllerCreateReport', 'type', type)
            // verify required parameter 'createBookingDto' is not null or undefined
            assertParamExists('bookingControllerCreateReport', 'createBookingDto', createBookingDto)
            const localVarPath = `/api/booking/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerDeleteReport: async (id: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bookingControllerDeleteReport', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('bookingControllerDeleteReport', 'type', type)
            const localVarPath = `/api/booking/{type}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetAllReports: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('bookingControllerGetAllReports', 'type', type)
            const localVarPath = `/api/booking/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetReportById: async (id: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bookingControllerGetReportById', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('bookingControllerGetReportById', 'type', type)
            const localVarPath = `/api/booking/{type}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateBookingDto} updateBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerUpdateReport: async (type: string, id: string, updateBookingDto: UpdateBookingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('bookingControllerUpdateReport', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bookingControllerUpdateReport', 'id', id)
            // verify required parameter 'updateBookingDto' is not null or undefined
            assertParamExists('bookingControllerUpdateReport', 'updateBookingDto', updateBookingDto)
            const localVarPath = `/api/booking/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDestroy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {CreateServiceDto} createServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerCreateReport: async (id: string, type: string, createServiceDto: CreateServiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesControllerCreateReport', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerCreateReport', 'type', type)
            // verify required parameter 'createServiceDto' is not null or undefined
            assertParamExists('servicesControllerCreateReport', 'createServiceDto', createServiceDto)
            const localVarPath = `/api/services/{type}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createServiceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerDeleteReport: async (id: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesControllerDeleteReport', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerDeleteReport', 'type', type)
            const localVarPath = `/api/services/{type}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerGetAllReports: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerGetAllReports', 'type', type)
            const localVarPath = `/api/services/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerGetReportById: async (id: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesControllerGetReportById', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerGetReportById', 'type', type)
            const localVarPath = `/api/services/{type}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerIndex: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerIndex', 'type', type)
            const localVarPath = `/api/services/{type}/foo`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerShow: async (type: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerShow', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesControllerShow', 'id', id)
            const localVarPath = `/api/services/{type}/foo{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateServiceDto} updateServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerUpdateReport: async (type: string, id: string, updateServiceDto: UpdateServiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('servicesControllerUpdateReport', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesControllerUpdateReport', 'id', id)
            // verify required parameter 'updateServiceDto' is not null or undefined
            assertParamExists('servicesControllerUpdateReport', 'updateServiceDto', updateServiceDto)
            const localVarPath = `/api/services/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateServiceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FooDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetDataTwo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FooDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetDataTwo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizedControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizedControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {CreateBookingDto} createBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingControllerCreateReport(type: string, createBookingDto: CreateBookingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingControllerCreateReport(type, createBookingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingControllerDeleteReport(id: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingControllerDeleteReport(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingControllerGetAllReports(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookingResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingControllerGetAllReports(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingControllerGetReportById(id: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingControllerGetReportById(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateBookingDto} updateBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingControllerUpdateReport(type: string, id: string, updateBookingDto: UpdateBookingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingControllerUpdateReport(type, id, updateBookingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerDestroy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerDestroy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {CreateServiceDto} createServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerCreateReport(id: string, type: string, createServiceDto: CreateServiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerCreateReport(id, type, createServiceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerDeleteReport(id: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerDeleteReport(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerGetAllReports(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerGetAllReports(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerGetReportById(id: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerGetReportById(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerIndex(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerIndex(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerShow(type: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerShow(type, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateServiceDto} updateServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesControllerUpdateReport(type: string, id: string, updateServiceDto: UpdateServiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesControllerUpdateReport(type, id, updateServiceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData(options?: any): AxiosPromise<FooDto> {
            return localVarFp.appControllerGetData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetDataTwo(options?: any): AxiosPromise<Array<FooDto>> {
            return localVarFp.appControllerGetDataTwo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizedControllerIndex(options?: any): AxiosPromise<void> {
            return localVarFp.authorizedControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {CreateBookingDto} createBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateReport(type: string, createBookingDto: CreateBookingDto, options?: any): AxiosPromise<BookingResponseDto> {
            return localVarFp.bookingControllerCreateReport(type, createBookingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerDeleteReport(id: string, type: string, options?: any): AxiosPromise<void> {
            return localVarFp.bookingControllerDeleteReport(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetAllReports(type: string, options?: any): AxiosPromise<Array<BookingResponseDto>> {
            return localVarFp.bookingControllerGetAllReports(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetReportById(id: string, type: string, options?: any): AxiosPromise<BookingResponseDto> {
            return localVarFp.bookingControllerGetReportById(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateBookingDto} updateBookingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerUpdateReport(type: string, id: string, updateBookingDto: UpdateBookingDto, options?: any): AxiosPromise<BookingResponseDto> {
            return localVarFp.bookingControllerUpdateReport(type, id, updateBookingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerCreate(options?: any): AxiosPromise<object> {
            return localVarFp.cartControllerCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDestroy(options?: any): AxiosPromise<object> {
            return localVarFp.cartControllerDestroy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerIndex(options?: any): AxiosPromise<object> {
            return localVarFp.cartControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {CreateServiceDto} createServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerCreateReport(id: string, type: string, createServiceDto: CreateServiceDto, options?: any): AxiosPromise<ServiceResponseDto> {
            return localVarFp.servicesControllerCreateReport(id, type, createServiceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerDeleteReport(id: string, type: string, options?: any): AxiosPromise<void> {
            return localVarFp.servicesControllerDeleteReport(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerGetAllReports(type: string, options?: any): AxiosPromise<Array<ServiceResponseDto>> {
            return localVarFp.servicesControllerGetAllReports(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerGetReportById(id: string, type: string, options?: any): AxiosPromise<ServiceResponseDto> {
            return localVarFp.servicesControllerGetReportById(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerIndex(type: string, options?: any): AxiosPromise<Array<ServiceResponseDto>> {
            return localVarFp.servicesControllerIndex(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerShow(type: string, id: string, options?: any): AxiosPromise<ServiceResponseDto> {
            return localVarFp.servicesControllerShow(type, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateServiceDto} updateServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesControllerUpdateReport(type: string, id: string, updateServiceDto: UpdateServiceDto, options?: any): AxiosPromise<ServiceResponseDto> {
            return localVarFp.servicesControllerUpdateReport(type, id, updateServiceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bookingControllerCreateReport operation in DefaultApi.
 * @export
 * @interface DefaultApiBookingControllerCreateReportRequest
 */
export interface DefaultApiBookingControllerCreateReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerCreateReport
     */
    readonly type: string

    /**
     * 
     * @type {CreateBookingDto}
     * @memberof DefaultApiBookingControllerCreateReport
     */
    readonly createBookingDto: CreateBookingDto
}

/**
 * Request parameters for bookingControllerDeleteReport operation in DefaultApi.
 * @export
 * @interface DefaultApiBookingControllerDeleteReportRequest
 */
export interface DefaultApiBookingControllerDeleteReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerDeleteReport
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerDeleteReport
     */
    readonly type: string
}

/**
 * Request parameters for bookingControllerGetAllReports operation in DefaultApi.
 * @export
 * @interface DefaultApiBookingControllerGetAllReportsRequest
 */
export interface DefaultApiBookingControllerGetAllReportsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerGetAllReports
     */
    readonly type: string
}

/**
 * Request parameters for bookingControllerGetReportById operation in DefaultApi.
 * @export
 * @interface DefaultApiBookingControllerGetReportByIdRequest
 */
export interface DefaultApiBookingControllerGetReportByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerGetReportById
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerGetReportById
     */
    readonly type: string
}

/**
 * Request parameters for bookingControllerUpdateReport operation in DefaultApi.
 * @export
 * @interface DefaultApiBookingControllerUpdateReportRequest
 */
export interface DefaultApiBookingControllerUpdateReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerUpdateReport
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBookingControllerUpdateReport
     */
    readonly id: string

    /**
     * 
     * @type {UpdateBookingDto}
     * @memberof DefaultApiBookingControllerUpdateReport
     */
    readonly updateBookingDto: UpdateBookingDto
}

/**
 * Request parameters for servicesControllerCreateReport operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerCreateReportRequest
 */
export interface DefaultApiServicesControllerCreateReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerCreateReport
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerCreateReport
     */
    readonly type: string

    /**
     * 
     * @type {CreateServiceDto}
     * @memberof DefaultApiServicesControllerCreateReport
     */
    readonly createServiceDto: CreateServiceDto
}

/**
 * Request parameters for servicesControllerDeleteReport operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerDeleteReportRequest
 */
export interface DefaultApiServicesControllerDeleteReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerDeleteReport
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerDeleteReport
     */
    readonly type: string
}

/**
 * Request parameters for servicesControllerGetAllReports operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerGetAllReportsRequest
 */
export interface DefaultApiServicesControllerGetAllReportsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerGetAllReports
     */
    readonly type: string
}

/**
 * Request parameters for servicesControllerGetReportById operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerGetReportByIdRequest
 */
export interface DefaultApiServicesControllerGetReportByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerGetReportById
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerGetReportById
     */
    readonly type: string
}

/**
 * Request parameters for servicesControllerIndex operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerIndexRequest
 */
export interface DefaultApiServicesControllerIndexRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerIndex
     */
    readonly type: string
}

/**
 * Request parameters for servicesControllerShow operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerShowRequest
 */
export interface DefaultApiServicesControllerShowRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerShow
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerShow
     */
    readonly id: string
}

/**
 * Request parameters for servicesControllerUpdateReport operation in DefaultApi.
 * @export
 * @interface DefaultApiServicesControllerUpdateReportRequest
 */
export interface DefaultApiServicesControllerUpdateReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerUpdateReport
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiServicesControllerUpdateReport
     */
    readonly id: string

    /**
     * 
     * @type {UpdateServiceDto}
     * @memberof DefaultApiServicesControllerUpdateReport
     */
    readonly updateServiceDto: UpdateServiceDto
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetData(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetDataTwo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetDataTwo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorizedControllerIndex(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorizedControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiBookingControllerCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bookingControllerCreateReport(requestParameters: DefaultApiBookingControllerCreateReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bookingControllerCreateReport(requestParameters.type, requestParameters.createBookingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiBookingControllerDeleteReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bookingControllerDeleteReport(requestParameters: DefaultApiBookingControllerDeleteReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bookingControllerDeleteReport(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiBookingControllerGetAllReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bookingControllerGetAllReports(requestParameters: DefaultApiBookingControllerGetAllReportsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bookingControllerGetAllReports(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiBookingControllerGetReportByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bookingControllerGetReportById(requestParameters: DefaultApiBookingControllerGetReportByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bookingControllerGetReportById(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiBookingControllerUpdateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bookingControllerUpdateReport(requestParameters: DefaultApiBookingControllerUpdateReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bookingControllerUpdateReport(requestParameters.type, requestParameters.id, requestParameters.updateBookingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cartControllerCreate(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cartControllerCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cartControllerDestroy(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cartControllerDestroy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cartControllerIndex(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cartControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerCreateReport(requestParameters: DefaultApiServicesControllerCreateReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerCreateReport(requestParameters.id, requestParameters.type, requestParameters.createServiceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerDeleteReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerDeleteReport(requestParameters: DefaultApiServicesControllerDeleteReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerDeleteReport(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerGetAllReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerGetAllReports(requestParameters: DefaultApiServicesControllerGetAllReportsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerGetAllReports(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerGetReportByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerGetReportById(requestParameters: DefaultApiServicesControllerGetReportByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerGetReportById(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerIndex(requestParameters: DefaultApiServicesControllerIndexRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerIndex(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerShow(requestParameters: DefaultApiServicesControllerShowRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerShow(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiServicesControllerUpdateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesControllerUpdateReport(requestParameters: DefaultApiServicesControllerUpdateReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesControllerUpdateReport(requestParameters.type, requestParameters.id, requestParameters.updateServiceDto, options).then((request) => request(this.axios, this.basePath));
    }
}


